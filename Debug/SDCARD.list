
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000398c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b70  08003b70  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003b70  08003b70  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b70  08003b70  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002184  20000024  08003b9c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021a8  08003b9c  000221a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b483  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d3b  00000000  00000000  0002b4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002d218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002db90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b98a  00000000  00000000  0002e440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097df  00000000  00000000  00049dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dc26  00000000  00000000  000535a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f11cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002554  00000000  00000000  000f124c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003afc 	.word	0x08003afc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08003afc 	.word	0x08003afc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint32_t byteswritten;                     /* File write/read counts */
	  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <main+0x44>)
 80001d0:	1d3c      	adds	r4, r7, #4
 80001d2:	461d      	mov	r5, r3
 80001d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001dc:	682b      	ldr	r3, [r5, #0]
 80001de:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 fa48 	bl	8000674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f816 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f8de 	bl	80003a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001ec:	f000 f86e 	bl	80002cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f8aa 	bl	8000348 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80001f4:	f002 feb4 	bl	8002f60 <MX_FATFS_Init>
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //Blink the LED every second
  	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80001f8:	2108      	movs	r1, #8
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <main+0x48>)
 80001fc:	f000 fd32 	bl	8000c64 <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 8000200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000204:	f000 fa9c 	bl	8000740 <HAL_Delay>
  	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000208:	e7f6      	b.n	80001f8 <main+0x30>
 800020a:	bf00      	nop
 800020c:	08003b14 	.word	0x08003b14
 8000210:	48000400 	.word	0x48000400

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fc62 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 031c 	add.w	r3, r7, #28
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]
 8000246:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000264:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000268:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fd12 	bl	8000c98 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027a:	f000 f8df 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fc04 	bl	8001aa8 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a6:	f000 f8c9 	bl	800043c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fe2d 	bl	8001f14 <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002c0:	f000 f8bc 	bl	800043c <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3758      	adds	r7, #88	; 0x58
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_SPI1_Init+0x74>)
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <MX_SPI1_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <MX_SPI1_Init+0x74>)
 80002d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_SPI1_Init+0x74>)
 80002e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <MX_SPI1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <MX_SPI1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_SPI1_Init+0x74>)
 80002fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_SPI1_Init+0x74>)
 8000302:	2230      	movs	r2, #48	; 0x30
 8000304:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_SPI1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_SPI1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_SPI1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_SPI1_Init+0x74>)
 800031a:	2207      	movs	r2, #7
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_SPI1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_SPI1_Init+0x74>)
 8000326:	2208      	movs	r2, #8
 8000328:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_SPI1_Init+0x74>)
 800032c:	f001 ff18 	bl	8002160 <HAL_SPI_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000336:	f000 f881 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200000d4 	.word	0x200000d4
 8000344:	40013000 	.word	0x40013000

08000348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800034e:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000354:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800038c:	f002 fafa 	bl	8002984 <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000396:	f000 f851 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000050 	.word	0x20000050
 80003a4:	40013800 	.word	0x40013800

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a10      	ldr	r2, [pc, #64]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_GPIO_Init+0x8c>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_CARD_PIN_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2109      	movs	r1, #9
 800040a:	480b      	ldr	r0, [pc, #44]	; (8000438 <MX_GPIO_Init+0x90>)
 800040c:	f000 fc12 	bl	8000c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_CARD_PIN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = CS_CARD_PIN_Pin|LED1_Pin;
 8000410:	2309      	movs	r3, #9
 8000412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	4619      	mov	r1, r3
 8000426:	4804      	ldr	r0, [pc, #16]	; (8000438 <MX_GPIO_Init+0x90>)
 8000428:	f000 fa92 	bl	8000950 <HAL_GPIO_Init>

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x44>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x44>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x44>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <HAL_MspInit+0x44>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a08      	ldr	r2, [pc, #32]	; (8000490 <HAL_MspInit+0x44>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_MspInit+0x44>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a17      	ldr	r2, [pc, #92]	; (8000510 <HAL_SPI_MspInit+0x7c>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d128      	bne.n	8000508 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <HAL_SPI_MspInit+0x80>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a16      	ldr	r2, [pc, #88]	; (8000514 <HAL_SPI_MspInit+0x80>)
 80004bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <HAL_SPI_MspInit+0x80>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <HAL_SPI_MspInit+0x80>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a10      	ldr	r2, [pc, #64]	; (8000514 <HAL_SPI_MspInit+0x80>)
 80004d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_SPI_MspInit+0x80>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004e6:	23e0      	movs	r3, #224	; 0xe0
 80004e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004f6:	2305      	movs	r3, #5
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 fa24 	bl	8000950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000508:	bf00      	nop
 800050a:	3728      	adds	r7, #40	; 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40013000 	.word	0x40013000
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <HAL_UART_MspInit+0x80>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d129      	bne.n	800058e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <HAL_UART_MspInit+0x84>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a17      	ldr	r2, [pc, #92]	; (800059c <HAL_UART_MspInit+0x84>)
 8000540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_UART_MspInit+0x84>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_UART_MspInit+0x84>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <HAL_UART_MspInit+0x84>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_UART_MspInit+0x84>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800056a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800057c:	2307      	movs	r3, #7
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f000 f9e1 	bl	8000950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	; 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40013800 	.word	0x40013800
 800059c:	40021000 	.word	0x40021000

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f000 f884 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <SystemInit+0x20>)
 8000602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <SystemInit+0x20>)
 8000608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800060c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000658 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0b      	ldr	r4, [pc, #44]	; (800066c <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800064a:	f7ff ffd7 	bl	80005fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064e:	f003 fa29 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000652:	f7ff fdb9 	bl	80001c8 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000658:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000664:	08003b78 	.word	0x08003b78
  ldr r2, =_sbss
 8000668:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800066c:	200021a8 	.word	0x200021a8

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>
	...

08000674 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <HAL_Init+0x28>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_Init+0x28>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f92f 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 f808 	bl	80006a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000690:	f7ff fedc 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40022000 	.word	0x40022000

080006a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_InitTick+0x54>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_InitTick+0x58>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f939 	bl	8000936 <HAL_SYSTICK_Config>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00e      	b.n	80006ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	d80a      	bhi.n	80006ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d4:	2200      	movs	r2, #0
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f000 f90f 	bl	80008fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <HAL_InitTick+0x5c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e000      	b.n	80006ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_IncTick+0x20>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_IncTick+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_IncTick+0x24>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008
 8000724:	20000138 	.word	0x20000138

08000728 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;  
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_GetTick+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000138 	.word	0x20000138

08000740 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000748:	f7ff ffee 	bl	8000728 <HAL_GetTick>
 800074c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000758:	d005      	beq.n	8000766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_Delay+0x40>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000766:	bf00      	nop
 8000768:	f7ff ffde 	bl	8000728 <HAL_GetTick>
 800076c:	4602      	mov	r2, r0
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8f7      	bhi.n	8000768 <HAL_Delay+0x28>
  {
  }
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000008 	.word	0x20000008

08000784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	60d3      	str	r3, [r2, #12]
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <__NVIC_GetPriorityGrouping+0x18>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	f003 0307 	and.w	r3, r3, #7
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db0a      	blt.n	8000812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	490c      	ldr	r1, [pc, #48]	; (8000834 <__NVIC_SetPriority+0x4c>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	440b      	add	r3, r1
 800080c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000810:	e00a      	b.n	8000828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4908      	ldr	r1, [pc, #32]	; (8000838 <__NVIC_SetPriority+0x50>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	3b04      	subs	r3, #4
 8000820:	0112      	lsls	r2, r2, #4
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	440b      	add	r3, r1
 8000826:	761a      	strb	r2, [r3, #24]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f1c3 0307 	rsb	r3, r3, #7
 8000856:	2b04      	cmp	r3, #4
 8000858:	bf28      	it	cs
 800085a:	2304      	movcs	r3, #4
 800085c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3304      	adds	r3, #4
 8000862:	2b06      	cmp	r3, #6
 8000864:	d902      	bls.n	800086c <NVIC_EncodePriority+0x30>
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3b03      	subs	r3, #3
 800086a:	e000      	b.n	800086e <NVIC_EncodePriority+0x32>
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43da      	mvns	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	401a      	ands	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43d9      	mvns	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	4313      	orrs	r3, r2
         );
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b4:	d301      	bcc.n	80008ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00f      	b.n	80008da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <SysTick_Config+0x40>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c2:	210f      	movs	r1, #15
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f7ff ff8e 	bl	80007e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <SysTick_Config+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SysTick_Config+0x40>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff47 	bl	8000784 <__NVIC_SetPriorityGrouping>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000910:	f7ff ff5c 	bl	80007cc <__NVIC_GetPriorityGrouping>
 8000914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff8e 	bl	800083c <NVIC_EncodePriority>
 8000920:	4602      	mov	r2, r0
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5d 	bl	80007e8 <__NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffb0 	bl	80008a4 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800095e:	e14e      	b.n	8000bfe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	2101      	movs	r1, #1
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 8140 	beq.w	8000bf8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d00b      	beq.n	8000998 <HAL_GPIO_Init+0x48>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d007      	beq.n	8000998 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800098c:	2b11      	cmp	r3, #17
 800098e:	d003      	beq.n	8000998 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b12      	cmp	r3, #18
 8000996:	d130      	bne.n	80009fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	f003 0201 	and.w	r2, r3, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d003      	beq.n	8000a3a <HAL_GPIO_Init+0xea>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d123      	bne.n	8000a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3208      	adds	r2, #8
 8000a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	220f      	movs	r2, #15
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	691a      	ldr	r2, [r3, #16]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	08da      	lsrs	r2, r3, #3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3208      	adds	r2, #8
 8000a7c:	6939      	ldr	r1, [r7, #16]
 8000a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 0203 	and.w	r2, r3, #3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 809a 	beq.w	8000bf8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac4:	4b55      	ldr	r3, [pc, #340]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a54      	ldr	r2, [pc, #336]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000adc:	4a50      	ldr	r2, [pc, #320]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	220f      	movs	r2, #15
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b06:	d013      	beq.n	8000b30 <HAL_GPIO_Init+0x1e0>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a46      	ldr	r2, [pc, #280]	; (8000c24 <HAL_GPIO_Init+0x2d4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d00d      	beq.n	8000b2c <HAL_GPIO_Init+0x1dc>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a45      	ldr	r2, [pc, #276]	; (8000c28 <HAL_GPIO_Init+0x2d8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d007      	beq.n	8000b28 <HAL_GPIO_Init+0x1d8>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a44      	ldr	r2, [pc, #272]	; (8000c2c <HAL_GPIO_Init+0x2dc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d101      	bne.n	8000b24 <HAL_GPIO_Init+0x1d4>
 8000b20:	2303      	movs	r3, #3
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b24:	2305      	movs	r3, #5
 8000b26:	e004      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <HAL_GPIO_Init+0x1e2>
 8000b30:	2300      	movs	r3, #0
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	f002 0203 	and.w	r2, r2, #3
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b42:	4937      	ldr	r1, [pc, #220]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3302      	adds	r3, #2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b74:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b9e:	4a24      	ldr	r2, [pc, #144]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_GPIO_Init+0x2e0>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f47f aea9 	bne.w	8000960 <HAL_GPIO_Init+0x10>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	40010400 	.word	0x40010400

08000c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
 8000c40:	4613      	mov	r3, r2
 8000c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c44:	787b      	ldrb	r3, [r7, #1]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c50:	e002      	b.n	8000c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43d9      	mvns	r1, r3
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	400b      	ands	r3, r1
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f000 bef4 	b.w	8001a9a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 816a 	beq.w	8000f96 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cc2:	4bb3      	ldr	r3, [pc, #716]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d00c      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cce:	4bb0      	ldr	r3, [pc, #704]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d159      	bne.n	8000d8e <HAL_RCC_OscConfig+0xf6>
 8000cda:	4bad      	ldr	r3, [pc, #692]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce6:	d152      	bne.n	8000d8e <HAL_RCC_OscConfig+0xf6>
 8000ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cf4:	fa93 f3a3 	rbit	r3, r3
 8000cf8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cfc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	fab3 f383 	clz	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d102      	bne.n	8000d1a <HAL_RCC_OscConfig+0x82>
 8000d14:	4b9e      	ldr	r3, [pc, #632]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	e015      	b.n	8000d46 <HAL_RCC_OscConfig+0xae>
 8000d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d22:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d32:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d36:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d42:	4b93      	ldr	r3, [pc, #588]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d4a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d4e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d52:	fa92 f2a2 	rbit	r2, r2
 8000d56:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d5a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d5e:	fab2 f282 	clz	r2, r2
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	f042 0220 	orr.w	r2, r2, #32
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	f002 021f 	and.w	r2, r2, #31
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 810c 	beq.w	8000f94 <HAL_RCC_OscConfig+0x2fc>
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8106 	bne.w	8000f94 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f000 be86 	b.w	8001a9a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d98:	d106      	bne.n	8000da8 <HAL_RCC_OscConfig+0x110>
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a7c      	ldr	r2, [pc, #496]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e030      	b.n	8000e0a <HAL_RCC_OscConfig+0x172>
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x134>
 8000db2:	4b77      	ldr	r3, [pc, #476]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a76      	ldr	r2, [pc, #472]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a73      	ldr	r2, [pc, #460]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e01e      	b.n	8000e0a <HAL_RCC_OscConfig+0x172>
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd6:	d10c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x15a>
 8000dd8:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a6c      	ldr	r2, [pc, #432]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a69      	ldr	r2, [pc, #420]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e00b      	b.n	8000e0a <HAL_RCC_OscConfig+0x172>
 8000df2:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a66      	ldr	r2, [pc, #408]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a63      	ldr	r2, [pc, #396]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e0a:	4b61      	ldr	r3, [pc, #388]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	f023 020f 	bic.w	r2, r3, #15
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	495d      	ldr	r1, [pc, #372]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d059      	beq.n	8000edc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc7e 	bl	8000728 <HAL_GetTick>
 8000e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e30:	e00a      	b.n	8000e48 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e32:	f7ff fc79 	bl	8000728 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d902      	bls.n	8000e48 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f000 be29 	b.w	8001a9a <HAL_RCC_OscConfig+0xe02>
 8000e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e50:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e5c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d102      	bne.n	8000e7a <HAL_RCC_OscConfig+0x1e2>
 8000e74:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	e015      	b.n	8000ea6 <HAL_RCC_OscConfig+0x20e>
 8000e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e82:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e92:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e96:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eaa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000eae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000eb2:	fa92 f2a2 	rbit	r2, r2
 8000eb6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eba:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ebe:	fab2 f282 	clz	r2, r2
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	f042 0220 	orr.w	r2, r2, #32
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	f002 021f 	and.w	r2, r2, #31
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0ab      	beq.n	8000e32 <HAL_RCC_OscConfig+0x19a>
 8000eda:	e05c      	b.n	8000f96 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc24 	bl	8000728 <HAL_GetTick>
 8000ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee4:	e00a      	b.n	8000efc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fc1f 	bl	8000728 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d902      	bls.n	8000efc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	f000 bdcf 	b.w	8001a9a <HAL_RCC_OscConfig+0xe02>
 8000efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f00:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f10:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f14:	fab3 f383 	clz	r3, r3
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d102      	bne.n	8000f2e <HAL_RCC_OscConfig+0x296>
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x2c2>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f32:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f46:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f4a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_RCC_OscConfig+0x2f8>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f5e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f62:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f66:	fa92 f2a2 	rbit	r2, r2
 8000f6a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f6e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f72:	fab2 f282 	clz	r2, r2
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	f042 0220 	orr.w	r2, r2, #32
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	f002 021f 	and.w	r2, r2, #31
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ab      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x24e>
 8000f8e:	e002      	b.n	8000f96 <HAL_RCC_OscConfig+0x2fe>
 8000f90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 816f 	beq.w	8001284 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fa6:	4bd0      	ldr	r3, [pc, #832]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00b      	beq.n	8000fca <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fb2:	4bcd      	ldr	r3, [pc, #820]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d16c      	bne.n	8001098 <HAL_RCC_OscConfig+0x400>
 8000fbe:	4bca      	ldr	r3, [pc, #808]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d166      	bne.n	8001098 <HAL_RCC_OscConfig+0x400>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fdc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe0:	fab3 f383 	clz	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d102      	bne.n	8000ffa <HAL_RCC_OscConfig+0x362>
 8000ff4:	4bbc      	ldr	r3, [pc, #752]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	e013      	b.n	8001022 <HAL_RCC_OscConfig+0x38a>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001012:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800101e:	4bb2      	ldr	r3, [pc, #712]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	2202      	movs	r2, #2
 8001024:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001028:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800102c:	fa92 f2a2 	rbit	r2, r2
 8001030:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001034:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001038:	fab2 f282 	clz	r2, r2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f002 021f 	and.w	r2, r2, #31
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <HAL_RCC_OscConfig+0x3cc>
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d002      	beq.n	8001064 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	f000 bd1b 	b.w	8001a9a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	21f8      	movs	r1, #248	; 0xf8
 8001074:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800107c:	fa91 f1a1 	rbit	r1, r1
 8001080:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001084:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001088:	fab1 f181 	clz	r1, r1
 800108c:	b2c9      	uxtb	r1, r1
 800108e:	408b      	lsls	r3, r1
 8001090:	4995      	ldr	r1, [pc, #596]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	e0f5      	b.n	8001284 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8085 	beq.w	80011ae <HAL_RCC_OscConfig+0x516>
 80010a4:	2301      	movs	r3, #1
 80010a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	461a      	mov	r2, r3
 80010cc:	2301      	movs	r3, #1
 80010ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fb2a 	bl	8000728 <HAL_GetTick>
 80010d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fb25 	bl	8000728 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d902      	bls.n	80010f0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f000 bcd5 	b.w	8001a9a <HAL_RCC_OscConfig+0xe02>
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001102:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001106:	fab3 f383 	clz	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b01      	cmp	r3, #1
 8001118:	d102      	bne.n	8001120 <HAL_RCC_OscConfig+0x488>
 800111a:	4b73      	ldr	r3, [pc, #460]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	e013      	b.n	8001148 <HAL_RCC_OscConfig+0x4b0>
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001138:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	2202      	movs	r2, #2
 800114a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800114e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001152:	fa92 f2a2 	rbit	r2, r2
 8001156:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800115a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800115e:	fab2 f282 	clz	r2, r2
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	f042 0220 	orr.w	r2, r2, #32
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	f002 021f 	and.w	r2, r2, #31
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0af      	beq.n	80010da <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b5b      	ldr	r3, [pc, #364]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	21f8      	movs	r1, #248	; 0xf8
 800118a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001192:	fa91 f1a1 	rbit	r1, r1
 8001196:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800119a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800119e:	fab1 f181 	clz	r1, r1
 80011a2:	b2c9      	uxtb	r1, r1
 80011a4:	408b      	lsls	r3, r1
 80011a6:	4950      	ldr	r1, [pc, #320]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
 80011ac:	e06a      	b.n	8001284 <HAL_RCC_OscConfig+0x5ec>
 80011ae:	2301      	movs	r3, #1
 80011b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	461a      	mov	r2, r3
 80011d6:	2300      	movs	r3, #0
 80011d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff faa5 	bl	8000728 <HAL_GetTick>
 80011de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e2:	e00a      	b.n	80011fa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff faa0 	bl	8000728 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d902      	bls.n	80011fa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f000 bc50 	b.w	8001a9a <HAL_RCC_OscConfig+0xe02>
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800120c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d102      	bne.n	800122a <HAL_RCC_OscConfig+0x592>
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	e013      	b.n	8001252 <HAL_RCC_OscConfig+0x5ba>
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001242:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_RCC_OscConfig+0x650>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2202      	movs	r2, #2
 8001254:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001258:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800125c:	fa92 f2a2 	rbit	r2, r2
 8001260:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001264:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001268:	fab2 f282 	clz	r2, r2
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	f042 0220 	orr.w	r2, r2, #32
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	f002 021f 	and.w	r2, r2, #31
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1af      	bne.n	80011e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80da 	beq.w	8001448 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d069      	beq.n	8001372 <HAL_RCC_OscConfig+0x6da>
 800129e:	2301      	movs	r3, #1
 80012a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_OscConfig+0x654>)
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	461a      	mov	r2, r3
 80012c4:	2301      	movs	r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fa2e 	bl	8000728 <HAL_GetTick>
 80012cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d0:	e00e      	b.n	80012f0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fa29 	bl	8000728 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d906      	bls.n	80012f0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e3d9      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	10908120 	.word	0x10908120
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001302:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001306:	2202      	movs	r2, #2
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	fa93 f2a3 	rbit	r2, r3
 8001314:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800131e:	2202      	movs	r2, #2
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fa93 f2a3 	rbit	r2, r3
 800132c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001330:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	4ba5      	ldr	r3, [pc, #660]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001336:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800133a:	2102      	movs	r1, #2
 800133c:	6019      	str	r1, [r3, #0]
 800133e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fa93 f1a3 	rbit	r1, r3
 8001348:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800134c:	6019      	str	r1, [r3, #0]
  return result;
 800134e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 031f 	and.w	r3, r3, #31
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0b0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x63a>
 8001370:	e06a      	b.n	8001448 <HAL_RCC_OscConfig+0x7b0>
 8001372:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001388:	601a      	str	r2, [r3, #0]
  return result;
 800138a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800138e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4b8c      	ldr	r3, [pc, #560]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2300      	movs	r3, #0
 80013a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff f9c0 	bl	8000728 <HAL_GetTick>
 80013a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e009      	b.n	80013c2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff f9bb 	bl	8000728 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e36b      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
 80013c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013c6:	2202      	movs	r2, #2
 80013c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	fa93 f2a3 	rbit	r2, r3
 80013d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013de:	2202      	movs	r2, #2
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	fa93 f2a3 	rbit	r2, r3
 80013ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001408:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140a:	4b6f      	ldr	r3, [pc, #444]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 800140c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001412:	2102      	movs	r1, #2
 8001414:	6019      	str	r1, [r3, #0]
 8001416:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f1a3 	rbit	r1, r3
 8001420:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001424:	6019      	str	r1, [r3, #0]
  return result;
 8001426:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1b2      	bne.n	80013ae <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8158 	beq.w	8001708 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <HAL_RCC_OscConfig+0x938>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d11a      	bne.n	80014d2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149c:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x938>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	; (80015d0 <HAL_RCC_OscConfig+0x938>)
 80014a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a8:	f7ff f93e 	bl	8000728 <HAL_GetTick>
 80014ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b2:	f7ff f939 	bl	8000728 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e2e9      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <HAL_RCC_OscConfig+0x938>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0ef      	beq.n	80014b2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x852>
 80014dc:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a39      	ldr	r2, [pc, #228]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	e02f      	b.n	800154a <HAL_RCC_OscConfig+0x8b2>
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x876>
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001506:	f023 0304 	bic.w	r3, r3, #4
 800150a:	6213      	str	r3, [r2, #32]
 800150c:	e01d      	b.n	800154a <HAL_RCC_OscConfig+0x8b2>
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d10c      	bne.n	8001532 <HAL_RCC_OscConfig+0x89a>
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	e00b      	b.n	800154a <HAL_RCC_OscConfig+0x8b2>
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d06b      	beq.n	800162c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff f8e8 	bl	8000728 <HAL_GetTick>
 8001558:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff f8e3 	bl	8000728 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e291      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
 8001576:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015a4:	601a      	str	r2, [r3, #0]
  return result;
 80015a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d109      	bne.n	80015d4 <HAL_RCC_OscConfig+0x93c>
 80015c0:	4b01      	ldr	r3, [pc, #4]	; (80015c8 <HAL_RCC_OscConfig+0x930>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	e014      	b.n	80015f0 <HAL_RCC_OscConfig+0x958>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	10908120 	.word	0x10908120
 80015d0:	40007000 	.word	0x40007000
 80015d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015d8:	2202      	movs	r2, #2
 80015da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fa93 f2a3 	rbit	r2, r3
 80015e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	4bbb      	ldr	r3, [pc, #748]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015f4:	2102      	movs	r1, #2
 80015f6:	6011      	str	r1, [r2, #0]
 80015f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	fa92 f1a2 	rbit	r1, r2
 8001602:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001606:	6011      	str	r1, [r2, #0]
  return result;
 8001608:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	fab2 f282 	clz	r2, r2
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	f002 021f 	and.w	r2, r2, #31
 800161e:	2101      	movs	r1, #1
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d099      	beq.n	800155e <HAL_RCC_OscConfig+0x8c6>
 800162a:	e063      	b.n	80016f4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff f87c 	bl	8000728 <HAL_GetTick>
 8001630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff f877 	bl	8000728 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e225      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
 800164e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800166a:	2202      	movs	r2, #2
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800167c:	601a      	str	r2, [r3, #0]
  return result;
 800167e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001682:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d102      	bne.n	800169e <HAL_RCC_OscConfig+0xa06>
 8001698:	4b90      	ldr	r3, [pc, #576]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	e00d      	b.n	80016ba <HAL_RCC_OscConfig+0xa22>
 800169e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	4b89      	ldr	r3, [pc, #548]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016be:	2102      	movs	r1, #2
 80016c0:	6011      	str	r1, [r2, #0]
 80016c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	fa92 f1a2 	rbit	r1, r2
 80016cc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016d0:	6011      	str	r1, [r2, #0]
  return result;
 80016d2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1a0      	bne.n	8001636 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4b77      	ldr	r3, [pc, #476]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a76      	ldr	r2, [pc, #472]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 8001702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001706:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 81c2 	beq.w	8001a98 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001714:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b08      	cmp	r3, #8
 800171e:	f000 819c 	beq.w	8001a5a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b02      	cmp	r3, #2
 800172a:	f040 8114 	bne.w	8001956 <HAL_RCC_OscConfig+0xcbe>
 800172e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001732:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001746:	601a      	str	r2, [r3, #0]
  return result;
 8001748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800174c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	2300      	movs	r3, #0
 8001762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7fe ffe0 	bl	8000728 <HAL_GetTick>
 8001768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	e009      	b.n	8001782 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7fe ffdb 	bl	8000728 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e18b      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
 8001782:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800178a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800179a:	601a      	str	r2, [r3, #0]
  return result;
 800179c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0xb24>
 80017b6:	4b49      	ldr	r3, [pc, #292]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	e01b      	b.n	80017f4 <HAL_RCC_OscConfig+0xb5c>
 80017bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017fc:	6011      	str	r1, [r2, #0]
 80017fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	fa92 f1a2 	rbit	r1, r2
 8001808:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800180c:	6011      	str	r1, [r2, #0]
  return result;
 800180e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d19e      	bne.n	800176e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	430b      	orrs	r3, r1
 8001846:	4925      	ldr	r1, [pc, #148]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001864:	601a      	str	r2, [r3, #0]
  return result;
 8001866:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800186a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001876:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	461a      	mov	r2, r3
 800187e:	2301      	movs	r3, #1
 8001880:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7fe ff51 	bl	8000728 <HAL_GetTick>
 8001886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188a:	e009      	b.n	80018a0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7fe ff4c 	bl	8000728 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0fc      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
 80018a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b8:	601a      	str	r2, [r3, #0]
  return result;
 80018ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0xc48>
 80018d4:	4b01      	ldr	r3, [pc, #4]	; (80018dc <HAL_RCC_OscConfig+0xc44>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	e01e      	b.n	8001918 <HAL_RCC_OscConfig+0xc80>
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_OscConfig+0xe0c>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800191c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001920:	6011      	str	r1, [r2, #0]
 8001922:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	fa92 f1a2 	rbit	r1, r2
 800192c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001930:	6011      	str	r1, [r2, #0]
  return result;
 8001932:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f042 0220 	orr.w	r2, r2, #32
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f002 021f 	and.w	r2, r2, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d09b      	beq.n	800188c <HAL_RCC_OscConfig+0xbf4>
 8001954:	e0a0      	b.n	8001a98 <HAL_RCC_OscConfig+0xe00>
 8001956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800195e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196e:	601a      	str	r2, [r3, #0]
  return result;
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe fecc 	bl	8000728 <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7fe fec7 	bl	8000728 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e077      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
 80019aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	601a      	str	r2, [r3, #0]
  return result;
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_RCC_OscConfig+0xd4c>
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_RCC_OscConfig+0xe0c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0xd84>
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f107 0318 	add.w	r3, r7, #24
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0xe0c>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f107 0210 	add.w	r2, r7, #16
 8001a20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a24:	6011      	str	r1, [r2, #0]
 8001a26:	f107 0210 	add.w	r2, r7, #16
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	fa92 f1a2 	rbit	r1, r2
 8001a30:	f107 020c 	add.w	r2, r7, #12
 8001a34:	6011      	str	r1, [r2, #0]
  return result;
 8001a36:	f107 020c 	add.w	r2, r7, #12
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d19e      	bne.n	8001996 <HAL_RCC_OscConfig+0xcfe>
 8001a58:	e01e      	b.n	8001a98 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e018      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_RCC_OscConfig+0xe0c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a70:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09e      	sub	sp, #120	; 0x78
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e162      	b.n	8001d86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b90      	ldr	r3, [pc, #576]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	498b      	ldr	r1, [pc, #556]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e14a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	497f      	ldr	r1, [pc, #508]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80dc 	beq.w	8001cd4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d13c      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xf6>
 8001b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xa6>
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e00f      	b.n	8001b6e <HAL_RCC_ClockConfig+0xc6>
 8001b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b60:	663b      	str	r3, [r7, #96]	; 0x60
 8001b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b6a:	4b67      	ldr	r3, [pc, #412]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b72:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b76:	fa92 f2a2 	rbit	r2, r2
 8001b7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f042 0220 	orr.w	r2, r2, #32
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f002 021f 	and.w	r2, r2, #31
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d17b      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0f3      	b.n	8001d86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d13c      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x178>
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001baa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x128>
 8001bca:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e00f      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
 8001bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8001bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40
 8001be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bf8:	fa92 f2a2 	rbit	r2, r2
 8001bfc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c00:	fab2 f282 	clz	r2, r2
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f042 0220 	orr.w	r2, r2, #32
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f002 021f 	and.w	r2, r2, #31
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d13a      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0b2      	b.n	8001d86 <HAL_RCC_ClockConfig+0x2de>
 8001c20:	2302      	movs	r3, #2
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x1a0>
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e00d      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1bc>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2202      	movs	r2, #2
 8001c66:	61ba      	str	r2, [r7, #24]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	fa92 f2a2 	rbit	r2, r2
 8001c6e:	617a      	str	r2, [r7, #20]
  return result;
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	fab2 f282 	clz	r2, r2
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f042 0220 	orr.w	r2, r2, #32
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f002 021f 	and.w	r2, r2, #31
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f202 	lsl.w	r2, r1, r2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e079      	b.n	8001d86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	491a      	ldr	r1, [pc, #104]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7fe fd40 	bl	8000728 <HAL_GetTick>
 8001ca8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7fe fd3c 	bl	8000728 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e061      	b.n	8001d86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d214      	bcs.n	8001d0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4906      	ldr	r1, [pc, #24]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_RCC_ClockConfig+0x25c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e040      	b.n	8001d86 <HAL_RCC_ClockConfig+0x2de>
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_ClockConfig+0x2e8>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	491a      	ldr	r1, [pc, #104]	; (8001d90 <HAL_RCC_ClockConfig+0x2e8>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_RCC_ClockConfig+0x2e8>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4912      	ldr	r1, [pc, #72]	; (8001d90 <HAL_RCC_ClockConfig+0x2e8>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d4a:	f000 f829 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_ClockConfig+0x2e8>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d58:	22f0      	movs	r2, #240	; 0xf0
 8001d5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	60fa      	str	r2, [r7, #12]
  return result;
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	40d3      	lsrs	r3, r2
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x2ec>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	fa21 f303 	lsr.w	r3, r1, r3
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_RCC_ClockConfig+0x2f0>)
 8001d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_ClockConfig+0x2f4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fc8e 	bl	80006a0 <HAL_InitTick>
  
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3778      	adds	r7, #120	; 0x78
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08003b38 	.word	0x08003b38
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b08b      	sub	sp, #44	; 0x2c
 8001da4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d002      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dce:	e03c      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dd2:	623b      	str	r3, [r7, #32]
      break;
 8001dd4:	e03c      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ddc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001de0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	fa92 f2a2 	rbit	r2, r2
 8001de8:	607a      	str	r2, [r7, #4]
  return result;
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	40d3      	lsrs	r3, r2
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	220f      	movs	r2, #15
 8001e04:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	fa92 f2a2 	rbit	r2, r2
 8001e0c:	60fa      	str	r2, [r7, #12]
  return result;
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	fab2 f282 	clz	r2, r2
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	40d3      	lsrs	r3, r2
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
 8001e38:	e004      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	623b      	str	r3, [r7, #32]
      break;
 8001e48:	e002      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e4c:	623b      	str	r3, [r7, #32]
      break;
 8001e4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e50:	6a3b      	ldr	r3, [r7, #32]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	372c      	adds	r7, #44	; 0x2c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	08003b50 	.word	0x08003b50
 8001e6c:	08003b60 	.word	0x08003b60
 8001e70:	003d0900 	.word	0x003d0900

08001e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000

08001e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e92:	f7ff ffef 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001e96:	4601      	mov	r1, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ea0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ea4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	fa92 f2a2 	rbit	r2, r2
 8001eac:	603a      	str	r2, [r7, #0]
  return result;
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	40d3      	lsrs	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x40>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08003b48 	.word	0x08003b48

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ed6:	f7ff ffcd 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ee4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ee8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	603a      	str	r2, [r7, #0]
  return result;
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08003b48 	.word	0x08003b48

08001f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b092      	sub	sp, #72	; 0x48
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80cd 	beq.w	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f38:	4b86      	ldr	r3, [pc, #536]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10e      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b83      	ldr	r3, [pc, #524]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4a82      	ldr	r2, [pc, #520]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	61d3      	str	r3, [r2, #28]
 8001f50:	4b80      	ldr	r3, [pc, #512]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a79      	ldr	r2, [pc, #484]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fbd5 	bl	8000728 <HAL_GetTick>
 8001f7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7fe fbd1 	bl	8000728 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0db      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07d      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d076      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2301      	movs	r3, #1
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	4b55      	ldr	r3, [pc, #340]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	461a      	mov	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002010:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002014:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d045      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe fb82 	bl	8000728 <HAL_GetTick>
 8002024:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fb7e 	bl	8000728 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e086      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800203e:	2302      	movs	r3, #2
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	61fb      	str	r3, [r7, #28]
  return result;
 8002056:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d102      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	e007      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002072:	2302      	movs	r3, #2
 8002074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b35      	ldr	r3, [pc, #212]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	2202      	movs	r2, #2
 8002084:	613a      	str	r2, [r7, #16]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	60fa      	str	r2, [r7, #12]
  return result;
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0bd      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4926      	ldr	r1, [pc, #152]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a22      	ldr	r2, [pc, #136]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	491a      	ldr	r1, [pc, #104]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	f023 0210 	bic.w	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4912      	ldr	r1, [pc, #72]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800210a:	4313      	orrs	r3, r2
 800210c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	490b      	ldr	r1, [pc, #44]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002128:	4313      	orrs	r3, r2
 800212a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002146:	4313      	orrs	r3, r2
 8002148:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3748      	adds	r7, #72	; 0x48
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000
 800215c:	10908100 	.word	0x10908100

08002160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e095      	b.n	800229e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002182:	d009      	beq.n	8002198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
 800218a:	e005      	b.n	8002198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe f96e 	bl	8000494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021d8:	d902      	bls.n	80021e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e002      	b.n	80021e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80021ee:	d007      	beq.n	8002200 <HAL_SPI_Init+0xa0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021f8:	d002      	beq.n	8002200 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002242:	ea42 0103 	orr.w	r1, r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	f003 0204 	and.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b08a      	sub	sp, #40	; 0x28
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x26>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e1fb      	b.n	80026c4 <HAL_SPI_TransmitReceive+0x41e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d4:	f7fe fa28 	bl	8000728 <HAL_GetTick>
 80022d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022f0:	7efb      	ldrb	r3, [r7, #27]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d00e      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x6e>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fc:	d106      	bne.n	800230c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <HAL_SPI_TransmitReceive+0x66>
 8002306:	7efb      	ldrb	r3, [r7, #27]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d003      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800230c:	2302      	movs	r3, #2
 800230e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002312:	e1cd      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_SPI_TransmitReceive+0x80>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_SPI_TransmitReceive+0x80>
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800232c:	e1c0      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b04      	cmp	r3, #4
 8002338:	d003      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002384:	d802      	bhi.n	800238c <HAL_SPI_TransmitReceive+0xe6>
 8002386:	8a3b      	ldrh	r3, [r7, #16]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d908      	bls.n	800239e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	e007      	b.n	80023ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b8:	2b40      	cmp	r3, #64	; 0x40
 80023ba:	d007      	beq.n	80023cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023d4:	d97c      	bls.n	80024d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x13e>
 80023de:	8a7b      	ldrh	r3, [r7, #18]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d169      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	881a      	ldrh	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	1c9a      	adds	r2, r3, #2
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002408:	e056      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d11b      	bne.n	8002450 <HAL_SPI_TransmitReceive+0x1aa>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_SPI_TransmitReceive+0x1aa>
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b01      	cmp	r3, #1
 8002426:	d113      	bne.n	8002450 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	1c9a      	adds	r2, r3, #2
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d11c      	bne.n	8002498 <HAL_SPI_TransmitReceive+0x1f2>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	b292      	uxth	r2, r2
 8002476:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	1c9a      	adds	r2, r3, #2
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002498:	f7fe f946 	bl	8000728 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d807      	bhi.n	80024b8 <HAL_SPI_TransmitReceive+0x212>
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d003      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80024b6:	e0fb      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1a3      	bne.n	800240a <HAL_SPI_TransmitReceive+0x164>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d19d      	bne.n	800240a <HAL_SPI_TransmitReceive+0x164>
 80024ce:	e0df      	b.n	8002690 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x23a>
 80024d8:	8a7b      	ldrh	r3, [r7, #18]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	f040 80cb 	bne.w	8002676 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d912      	bls.n	8002510 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	1c9a      	adds	r2, r3, #2
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b02      	subs	r3, #2
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800250e:	e0b2      	b.n	8002676 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002536:	e09e      	b.n	8002676 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d134      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x30a>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02f      	beq.n	80025b0 <HAL_SPI_TransmitReceive+0x30a>
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12c      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d912      	bls.n	8002586 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	1c9a      	adds	r2, r3, #2
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b02      	subs	r3, #2
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002584:	e012      	b.n	80025ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d148      	bne.n	8002650 <HAL_SPI_TransmitReceive+0x3aa>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d042      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d923      	bls.n	800261e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	b292      	uxth	r2, r2
 80025e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b02      	subs	r3, #2
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d81f      	bhi.n	800264c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	e016      	b.n	800264c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f103 020c 	add.w	r2, r3, #12
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800264c:	2301      	movs	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002650:	f7fe f86a 	bl	8000728 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265c:	429a      	cmp	r2, r3
 800265e:	d803      	bhi.n	8002668 <HAL_SPI_TransmitReceive+0x3c2>
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d102      	bne.n	800266e <HAL_SPI_TransmitReceive+0x3c8>
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002674:	e01c      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f af5b 	bne.w	8002538 <HAL_SPI_TransmitReceive+0x292>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	f47f af54 	bne.w	8002538 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f92f 	bl	80028f8 <SPI_EndRxTxTransaction>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	661a      	str	r2, [r3, #96]	; 0x60
 80026ac:	e000      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80026ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026dc:	f7fe f824 	bl	8000728 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026ec:	f7fe f81c 	bl	8000728 <HAL_GetTick>
 80026f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	0d1b      	lsrs	r3, r3, #20
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002702:	e054      	b.n	80027ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d050      	beq.n	80027ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800270c:	f7fe f80c 	bl	8000728 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	d902      	bls.n	8002722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d13d      	bne.n	800279e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273a:	d111      	bne.n	8002760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002744:	d004      	beq.n	8002750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d107      	bne.n	8002760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d10f      	bne.n	800278a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e017      	b.n	80027ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d19b      	bne.n	8002704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000000 	.word	0x20000000

080027dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80027ea:	f7fd ff9d 	bl	8000728 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027fa:	f7fd ff95 	bl	8000728 <HAL_GetTick>
 80027fe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002800:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00da      	lsls	r2, r3, #3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	0d1b      	lsrs	r3, r3, #20
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002818:	e05f      	b.n	80028da <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002820:	d106      	bne.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d050      	beq.n	80028da <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002838:	f7fd ff76 	bl	8000728 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	429a      	cmp	r2, r3
 8002846:	d902      	bls.n	800284e <SPI_WaitFifoStateUntilTimeout+0x72>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13d      	bne.n	80028ca <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800285c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002866:	d111      	bne.n	800288c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	d004      	beq.n	800287c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287a:	d107      	bne.n	800288c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d10f      	bne.n	80028b6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e010      	b.n	80028ec <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d197      	bne.n	800281a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000000 	.word	0x20000000

080028f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff ff63 	bl	80027dc <SPI_WaitFifoStateUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e027      	b.n	800297c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff fec8 	bl	80026cc <SPI_WaitFlagStateUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e014      	b.n	800297c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff ff3c 	bl	80027dc <SPI_WaitFifoStateUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	f043 0220 	orr.w	r2, r3, #32
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e000      	b.n	800297c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e040      	b.n	8002a18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fd fdb6 	bl	8000518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2224      	movs	r2, #36	; 0x24
 80029b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f82c 	bl	8002a20 <UART_SetConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e022      	b.n	8002a18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f958 	bl	8002c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f9df 	bl	8002dd4 <UART_CheckIdleState>
 8002a16:	4603      	mov	r3, r0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <UART_SetConfig+0x258>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	6979      	ldr	r1, [r7, #20]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a79      	ldr	r2, [pc, #484]	; (8002c7c <UART_SetConfig+0x25c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d121      	bne.n	8002ae0 <UART_SetConfig+0xc0>
 8002a9c:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <UART_SetConfig+0x260>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d817      	bhi.n	8002ad8 <UART_SetConfig+0xb8>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <UART_SetConfig+0x90>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002acd 	.word	0x08002acd
 8002ab8:	08002ad3 	.word	0x08002ad3
 8002abc:	08002ac7 	.word	0x08002ac7
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e01e      	b.n	8002b04 <UART_SetConfig+0xe4>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e01b      	b.n	8002b04 <UART_SetConfig+0xe4>
 8002acc:	2304      	movs	r3, #4
 8002ace:	77fb      	strb	r3, [r7, #31]
 8002ad0:	e018      	b.n	8002b04 <UART_SetConfig+0xe4>
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	77fb      	strb	r3, [r7, #31]
 8002ad6:	e015      	b.n	8002b04 <UART_SetConfig+0xe4>
 8002ad8:	2310      	movs	r3, #16
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	bf00      	nop
 8002ade:	e011      	b.n	8002b04 <UART_SetConfig+0xe4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <UART_SetConfig+0x264>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d102      	bne.n	8002af0 <UART_SetConfig+0xd0>
 8002aea:	2300      	movs	r3, #0
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e009      	b.n	8002b04 <UART_SetConfig+0xe4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a64      	ldr	r2, [pc, #400]	; (8002c88 <UART_SetConfig+0x268>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d102      	bne.n	8002b00 <UART_SetConfig+0xe0>
 8002afa:	2300      	movs	r3, #0
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e001      	b.n	8002b04 <UART_SetConfig+0xe4>
 8002b00:	2310      	movs	r3, #16
 8002b02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0c:	d15c      	bne.n	8002bc8 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d828      	bhi.n	8002b66 <UART_SetConfig+0x146>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <UART_SetConfig+0xfc>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b41 	.word	0x08002b41
 8002b20:	08002b49 	.word	0x08002b49
 8002b24:	08002b51 	.word	0x08002b51
 8002b28:	08002b67 	.word	0x08002b67
 8002b2c:	08002b57 	.word	0x08002b57
 8002b30:	08002b67 	.word	0x08002b67
 8002b34:	08002b67 	.word	0x08002b67
 8002b38:	08002b67 	.word	0x08002b67
 8002b3c:	08002b5f 	.word	0x08002b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b40:	f7ff f9a4 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8002b44:	61b8      	str	r0, [r7, #24]
        break;
 8002b46:	e013      	b.n	8002b70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b48:	f7ff f9c2 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002b4c:	61b8      	str	r0, [r7, #24]
        break;
 8002b4e:	e00f      	b.n	8002b70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b50:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <UART_SetConfig+0x26c>)
 8002b52:	61bb      	str	r3, [r7, #24]
        break;
 8002b54:	e00c      	b.n	8002b70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b56:	f7ff f923 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8002b5a:	61b8      	str	r0, [r7, #24]
        break;
 8002b5c:	e008      	b.n	8002b70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b62:	61bb      	str	r3, [r7, #24]
        break;
 8002b64:	e004      	b.n	8002b70 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d074      	beq.n	8002c60 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	005a      	lsls	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b0f      	cmp	r3, #15
 8002b92:	d916      	bls.n	8002bc2 <UART_SetConfig+0x1a2>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d212      	bcs.n	8002bc2 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f023 030f 	bic.w	r3, r3, #15
 8002ba4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	89fa      	ldrh	r2, [r7, #14]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	e04e      	b.n	8002c60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	77bb      	strb	r3, [r7, #30]
 8002bc6:	e04b      	b.n	8002c60 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d827      	bhi.n	8002c1e <UART_SetConfig+0x1fe>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <UART_SetConfig+0x1b4>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002c01 	.word	0x08002c01
 8002bdc:	08002c09 	.word	0x08002c09
 8002be0:	08002c1f 	.word	0x08002c1f
 8002be4:	08002c0f 	.word	0x08002c0f
 8002be8:	08002c1f 	.word	0x08002c1f
 8002bec:	08002c1f 	.word	0x08002c1f
 8002bf0:	08002c1f 	.word	0x08002c1f
 8002bf4:	08002c17 	.word	0x08002c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff f948 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8002bfc:	61b8      	str	r0, [r7, #24]
        break;
 8002bfe:	e013      	b.n	8002c28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c00:	f7ff f966 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002c04:	61b8      	str	r0, [r7, #24]
        break;
 8002c06:	e00f      	b.n	8002c28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <UART_SetConfig+0x26c>)
 8002c0a:	61bb      	str	r3, [r7, #24]
        break;
 8002c0c:	e00c      	b.n	8002c28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c0e:	f7ff f8c7 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8002c12:	61b8      	str	r0, [r7, #24]
        break;
 8002c14:	e008      	b.n	8002c28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1a:	61bb      	str	r3, [r7, #24]
        break;
 8002c1c:	e004      	b.n	8002c28 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	77bb      	strb	r3, [r7, #30]
        break;
 8002c26:	bf00      	nop
    }

    if (pclk != 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d018      	beq.n	8002c60 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	085a      	lsrs	r2, r3, #1
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	441a      	add	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0f      	cmp	r3, #15
 8002c48:	d908      	bls.n	8002c5c <UART_SetConfig+0x23c>
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d204      	bcs.n	8002c5c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e001      	b.n	8002c60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	efff69f3 	.word	0xefff69f3
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40004800 	.word	0x40004800
 8002c8c:	007a1200 	.word	0x007a1200

08002c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01a      	beq.n	8002da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8e:	d10a      	bne.n	8002da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002de4:	f7fd fca0 	bl	8000728 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d10e      	bne.n	8002e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f82d 	bl	8002e66 <UART_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e023      	b.n	8002e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d10e      	bne.n	8002e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f817 	bl	8002e66 <UART_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e00d      	b.n	8002e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e76:	e05e      	b.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d05a      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7fd fc52 	bl	8000728 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11b      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ea4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e043      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02c      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eea:	d124      	bne.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ef4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f04:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e00f      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	bf0c      	ite	eq
 8002f46:	2301      	moveq	r3, #1
 8002f48:	2300      	movne	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d091      	beq.n	8002e78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002f64:	4904      	ldr	r1, [pc, #16]	; (8002f78 <MX_FATFS_Init+0x18>)
 8002f66:	4805      	ldr	r0, [pc, #20]	; (8002f7c <MX_FATFS_Init+0x1c>)
 8002f68:	f000 fd8c 	bl	8003a84 <FATFS_LinkDriver>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <MX_FATFS_Init+0x20>)
 8002f72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	2000013c 	.word	0x2000013c
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	20000140 	.word	0x20000140

08002f84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f9d7 	bl	8003344 <USER_SPI_initialize>
 8002f96:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fab5 	bl	800351c <USER_SPI_status>
 8002fb2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8002fcc:	7bf8      	ldrb	r0, [r7, #15]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	f000 fab8 	bl	8003548 <USER_SPI_read>
 8002fd8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4603      	mov	r3, r0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8002ff2:	7bf8      	ldrb	r0, [r7, #15]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	f000 fb0b 	bl	8003614 <USER_SPI_write>
 8002ffe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	603a      	str	r2, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
 8003014:	460b      	mov	r3, r1
 8003016:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8003018:	79b9      	ldrb	r1, [r7, #6]
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fb74 	bl	800370c <USER_SPI_ioctl>
 8003024:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003038:	f7fd fb76 	bl	8000728 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <SPI_Timer_On+0x20>)
 8003040:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <SPI_Timer_On+0x24>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200021a0 	.word	0x200021a0
 8003054:	200021a4 	.word	0x200021a4

08003058 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800305c:	f7fd fb64 	bl	8000728 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <SPI_Timer_Status+0x24>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SPI_Timer_Status+0x28>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	bf34      	ite	cc
 8003070:	2301      	movcc	r3, #1
 8003072:	2300      	movcs	r3, #0
 8003074:	b2db      	uxtb	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200021a0 	.word	0x200021a0
 8003080:	200021a4 	.word	0x200021a4

08003084 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800308e:	f107 020f 	add.w	r2, r7, #15
 8003092:	1df9      	adds	r1, r7, #7
 8003094:	2332      	movs	r3, #50	; 0x32
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2301      	movs	r3, #1
 800309a:	4804      	ldr	r0, [pc, #16]	; (80030ac <xchg_spi+0x28>)
 800309c:	f7ff f903 	bl	80022a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200000d4 	.word	0x200000d4

080030b0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e00a      	b.n	80030d6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	18d4      	adds	r4, r2, r3
 80030c6:	20ff      	movs	r0, #255	; 0xff
 80030c8:	f7ff ffdc 	bl	8003084 <xchg_spi>
 80030cc:	4603      	mov	r3, r0
 80030ce:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3f0      	bcc.n	80030c0 <rcvr_spi_multi+0x10>
	}
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}

080030e6 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e009      	b.n	800310a <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ffc0 	bl	8003084 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3301      	adds	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d3f1      	bcc.n	80030f6 <xmit_spi_multi+0x10>
	}
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003122:	f7fd fb01 	bl	8000728 <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800312c:	20ff      	movs	r0, #255	; 0xff
 800312e:	f7ff ffa9 	bl	8003084 <xchg_spi>
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2bff      	cmp	r3, #255	; 0xff
 800313a:	d007      	beq.n	800314c <wait_ready+0x32>
 800313c:	f7fd faf4 	bl	8000728 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d8ef      	bhi.n	800312c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2bff      	cmp	r3, #255	; 0xff
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003164:	2201      	movs	r2, #1
 8003166:	2101      	movs	r1, #1
 8003168:	4803      	ldr	r0, [pc, #12]	; (8003178 <despiselect+0x18>)
 800316a:	f7fd fd63 	bl	8000c34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800316e:	20ff      	movs	r0, #255	; 0xff
 8003170:	f7ff ff88 	bl	8003084 <xchg_spi>

}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	48000400 	.word	0x48000400

0800317c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003180:	2200      	movs	r2, #0
 8003182:	2101      	movs	r1, #1
 8003184:	4809      	ldr	r0, [pc, #36]	; (80031ac <spiselect+0x30>)
 8003186:	f7fd fd55 	bl	8000c34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800318a:	20ff      	movs	r0, #255	; 0xff
 800318c:	f7ff ff7a 	bl	8003084 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003194:	f7ff ffc1 	bl	800311a <wait_ready>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <spiselect+0x26>
 800319e:	2301      	movs	r3, #1
 80031a0:	e002      	b.n	80031a8 <spiselect+0x2c>

	despiselect();
 80031a2:	f7ff ffdd 	bl	8003160 <despiselect>
	return 0;	/* Timeout */
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	48000400 	.word	0x48000400

080031b0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80031ba:	20c8      	movs	r0, #200	; 0xc8
 80031bc:	f7ff ff38 	bl	8003030 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80031c0:	20ff      	movs	r0, #255	; 0xff
 80031c2:	f7ff ff5f 	bl	8003084 <xchg_spi>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2bff      	cmp	r3, #255	; 0xff
 80031ce:	d104      	bne.n	80031da <rcvr_datablock+0x2a>
 80031d0:	f7ff ff42 	bl	8003058 <SPI_Timer_Status>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f2      	bne.n	80031c0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2bfe      	cmp	r3, #254	; 0xfe
 80031de:	d001      	beq.n	80031e4 <rcvr_datablock+0x34>
 80031e0:	2300      	movs	r3, #0
 80031e2:	e00a      	b.n	80031fa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80031e4:	6839      	ldr	r1, [r7, #0]
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff62 	bl	80030b0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80031ec:	20ff      	movs	r0, #255	; 0xff
 80031ee:	f7ff ff49 	bl	8003084 <xchg_spi>
 80031f2:	20ff      	movs	r0, #255	; 0xff
 80031f4:	f7ff ff46 	bl	8003084 <xchg_spi>

	return 1;						/* Function succeeded */
 80031f8:	2301      	movs	r3, #1
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800320e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003212:	f7ff ff82 	bl	800311a <wait_ready>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <xmit_datablock+0x1e>
 800321c:	2300      	movs	r3, #0
 800321e:	e01e      	b.n	800325e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff2e 	bl	8003084 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	2bfd      	cmp	r3, #253	; 0xfd
 800322c:	d016      	beq.n	800325c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800322e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ff57 	bl	80030e6 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003238:	20ff      	movs	r0, #255	; 0xff
 800323a:	f7ff ff23 	bl	8003084 <xchg_spi>
 800323e:	20ff      	movs	r0, #255	; 0xff
 8003240:	f7ff ff20 	bl	8003084 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003244:	20ff      	movs	r0, #255	; 0xff
 8003246:	f7ff ff1d 	bl	8003084 <xchg_spi>
 800324a:	4603      	mov	r3, r0
 800324c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2b05      	cmp	r3, #5
 8003256:	d001      	beq.n	800325c <xmit_datablock+0x5a>
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <xmit_datablock+0x5c>
	}
	return 1;
 800325c:	2301      	movs	r3, #1
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	6039      	str	r1, [r7, #0]
 8003270:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da0e      	bge.n	8003298 <send_cmd+0x32>
		cmd &= 0x7F;
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003280:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003282:	2100      	movs	r1, #0
 8003284:	2037      	movs	r0, #55	; 0x37
 8003286:	f7ff ffee 	bl	8003266 <send_cmd>
 800328a:	4603      	mov	r3, r0
 800328c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d901      	bls.n	8003298 <send_cmd+0x32>
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	e051      	b.n	800333c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d008      	beq.n	80032b0 <send_cmd+0x4a>
		despiselect();
 800329e:	f7ff ff5f 	bl	8003160 <despiselect>
		if (!spiselect()) return 0xFF;
 80032a2:	f7ff ff6b 	bl	800317c <spiselect>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <send_cmd+0x4a>
 80032ac:	23ff      	movs	r3, #255	; 0xff
 80032ae:	e045      	b.n	800333c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fee3 	bl	8003084 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	0e1b      	lsrs	r3, r3, #24
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fedd 	bl	8003084 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fed7 	bl	8003084 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fed1 	bl	8003084 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fecc 	bl	8003084 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <send_cmd+0x94>
 80032f6:	2395      	movs	r3, #149	; 0x95
 80032f8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d101      	bne.n	8003304 <send_cmd+0x9e>
 8003300:	2387      	movs	r3, #135	; 0x87
 8003302:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff febc 	bl	8003084 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d102      	bne.n	8003318 <send_cmd+0xb2>
 8003312:	20ff      	movs	r0, #255	; 0xff
 8003314:	f7ff feb6 	bl	8003084 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003318:	230a      	movs	r3, #10
 800331a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800331c:	20ff      	movs	r0, #255	; 0xff
 800331e:	f7ff feb1 	bl	8003084 <xchg_spi>
 8003322:	4603      	mov	r3, r0
 8003324:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800332a:	2b00      	cmp	r3, #0
 800332c:	da05      	bge.n	800333a <send_cmd+0xd4>
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	3b01      	subs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <send_cmd+0xb6>

	return res;							/* Return received response */
 800333a:	7bbb      	ldrb	r3, [r7, #14]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <USER_SPI_initialize+0x14>
 8003354:	2301      	movs	r3, #1
 8003356:	e0d6      	b.n	8003506 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003358:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <USER_SPI_initialize+0x1cc>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <USER_SPI_initialize+0x2a>
 8003366:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <USER_SPI_initialize+0x1cc>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e0cb      	b.n	8003506 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800336e:	4b69      	ldr	r3, [pc, #420]	; (8003514 <USER_SPI_initialize+0x1d0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <USER_SPI_initialize+0x1d0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003380:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003382:	230a      	movs	r3, #10
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e005      	b.n	8003394 <USER_SPI_initialize+0x50>
 8003388:	20ff      	movs	r0, #255	; 0xff
 800338a:	f7ff fe7b 	bl	8003084 <xchg_spi>
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	3b01      	subs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f6      	bne.n	8003388 <USER_SPI_initialize+0x44>

	ty = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800339e:	2100      	movs	r1, #0
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7ff ff60 	bl	8003266 <send_cmd>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	f040 808b 	bne.w	80034c4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80033ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b2:	f7ff fe3d 	bl	8003030 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80033b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80033ba:	2008      	movs	r0, #8
 80033bc:	f7ff ff53 	bl	8003266 <send_cmd>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d151      	bne.n	800346a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	e00d      	b.n	80033e8 <USER_SPI_initialize+0xa4>
 80033cc:	7bfc      	ldrb	r4, [r7, #15]
 80033ce:	20ff      	movs	r0, #255	; 0xff
 80033d0:	f7ff fe58 	bl	8003084 <xchg_spi>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	f107 0310 	add.w	r3, r7, #16
 80033dc:	4423      	add	r3, r4
 80033de:	f803 2c08 	strb.w	r2, [r3, #-8]
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	3301      	adds	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d9ee      	bls.n	80033cc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80033ee:	7abb      	ldrb	r3, [r7, #10]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d167      	bne.n	80034c4 <USER_SPI_initialize+0x180>
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	2baa      	cmp	r3, #170	; 0xaa
 80033f8:	d164      	bne.n	80034c4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80033fa:	bf00      	nop
 80033fc:	f7ff fe2c 	bl	8003058 <SPI_Timer_Status>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <USER_SPI_initialize+0xd2>
 8003406:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800340a:	20a9      	movs	r0, #169	; 0xa9
 800340c:	f7ff ff2b 	bl	8003266 <send_cmd>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f2      	bne.n	80033fc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003416:	f7ff fe1f 	bl	8003058 <SPI_Timer_Status>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d051      	beq.n	80034c4 <USER_SPI_initialize+0x180>
 8003420:	2100      	movs	r1, #0
 8003422:	203a      	movs	r0, #58	; 0x3a
 8003424:	f7ff ff1f 	bl	8003266 <send_cmd>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d14a      	bne.n	80034c4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e00d      	b.n	8003450 <USER_SPI_initialize+0x10c>
 8003434:	7bfc      	ldrb	r4, [r7, #15]
 8003436:	20ff      	movs	r0, #255	; 0xff
 8003438:	f7ff fe24 	bl	8003084 <xchg_spi>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	f107 0310 	add.w	r3, r7, #16
 8003444:	4423      	add	r3, r4
 8003446:	f803 2c08 	strb.w	r2, [r3, #-8]
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	3301      	adds	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d9ee      	bls.n	8003434 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003456:	7a3b      	ldrb	r3, [r7, #8]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <USER_SPI_initialize+0x120>
 8003460:	230c      	movs	r3, #12
 8003462:	e000      	b.n	8003466 <USER_SPI_initialize+0x122>
 8003464:	2304      	movs	r3, #4
 8003466:	737b      	strb	r3, [r7, #13]
 8003468:	e02c      	b.n	80034c4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800346a:	2100      	movs	r1, #0
 800346c:	20a9      	movs	r0, #169	; 0xa9
 800346e:	f7ff fefa 	bl	8003266 <send_cmd>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d804      	bhi.n	8003482 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003478:	2302      	movs	r3, #2
 800347a:	737b      	strb	r3, [r7, #13]
 800347c:	23a9      	movs	r3, #169	; 0xa9
 800347e:	73bb      	strb	r3, [r7, #14]
 8003480:	e003      	b.n	800348a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003482:	2301      	movs	r3, #1
 8003484:	737b      	strb	r3, [r7, #13]
 8003486:	2301      	movs	r3, #1
 8003488:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800348a:	bf00      	nop
 800348c:	f7ff fde4 	bl	8003058 <SPI_Timer_Status>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <USER_SPI_initialize+0x162>
 8003496:	7bbb      	ldrb	r3, [r7, #14]
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fee3 	bl	8003266 <send_cmd>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f2      	bne.n	800348c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80034a6:	f7ff fdd7 	bl	8003058 <SPI_Timer_Status>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <USER_SPI_initialize+0x17c>
 80034b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034b4:	2010      	movs	r0, #16
 80034b6:	f7ff fed6 	bl	8003266 <send_cmd>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <USER_SPI_initialize+0x180>
				ty = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80034c4:	4a14      	ldr	r2, [pc, #80]	; (8003518 <USER_SPI_initialize+0x1d4>)
 80034c6:	7b7b      	ldrb	r3, [r7, #13]
 80034c8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80034ca:	f7ff fe49 	bl	8003160 <despiselect>

	if (ty) {			/* OK */
 80034ce:	7b7b      	ldrb	r3, [r7, #13]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d012      	beq.n	80034fa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <USER_SPI_initialize+0x1d0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <USER_SPI_initialize+0x1d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0210 	orr.w	r2, r2, #16
 80034e6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <USER_SPI_initialize+0x1cc>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <USER_SPI_initialize+0x1cc>)
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e002      	b.n	8003500 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <USER_SPI_initialize+0x1cc>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <USER_SPI_initialize+0x1cc>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b2db      	uxtb	r3, r3
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	bf00      	nop
 8003510:	20000020 	.word	0x20000020
 8003514:	200000d4 	.word	0x200000d4
 8003518:	20000040 	.word	0x20000040

0800351c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <USER_SPI_status+0x14>
 800352c:	2301      	movs	r3, #1
 800352e:	e002      	b.n	8003536 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <USER_SPI_status+0x28>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000020 	.word	0x20000020

08003548 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <USER_SPI_read+0x1c>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <USER_SPI_read+0x20>
 8003564:	2304      	movs	r3, #4
 8003566:	e04d      	b.n	8003604 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003568:	4b28      	ldr	r3, [pc, #160]	; (800360c <USER_SPI_read+0xc4>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <USER_SPI_read+0x32>
 8003576:	2303      	movs	r3, #3
 8003578:	e044      	b.n	8003604 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800357a:	4b25      	ldr	r3, [pc, #148]	; (8003610 <USER_SPI_read+0xc8>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <USER_SPI_read+0x44>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	025b      	lsls	r3, r3, #9
 800358a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d111      	bne.n	80035b6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	2011      	movs	r0, #17
 8003596:	f7ff fe66 	bl	8003266 <send_cmd>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d129      	bne.n	80035f4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80035a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035a4:	68b8      	ldr	r0, [r7, #8]
 80035a6:	f7ff fe03 	bl	80031b0 <rcvr_datablock>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d021      	beq.n	80035f4 <USER_SPI_read+0xac>
			count = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	e01e      	b.n	80035f4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	2012      	movs	r0, #18
 80035ba:	f7ff fe54 	bl	8003266 <send_cmd>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d117      	bne.n	80035f4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80035c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035c8:	68b8      	ldr	r0, [r7, #8]
 80035ca:	f7ff fdf1 	bl	80031b0 <rcvr_datablock>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <USER_SPI_read+0xa2>
				buff += 512;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035da:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	3b01      	subs	r3, #1
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ed      	bne.n	80035c4 <USER_SPI_read+0x7c>
 80035e8:	e000      	b.n	80035ec <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80035ea:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80035ec:	2100      	movs	r1, #0
 80035ee:	200c      	movs	r0, #12
 80035f0:	f7ff fe39 	bl	8003266 <send_cmd>
		}
	}
	despiselect();
 80035f4:	f7ff fdb4 	bl	8003160 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000020 	.word	0x20000020
 8003610:	20000040 	.word	0x20000040

08003614 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <USER_SPI_write+0x1c>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <USER_SPI_write+0x20>
 8003630:	2304      	movs	r3, #4
 8003632:	e063      	b.n	80036fc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003634:	4b33      	ldr	r3, [pc, #204]	; (8003704 <USER_SPI_write+0xf0>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <USER_SPI_write+0x32>
 8003642:	2303      	movs	r3, #3
 8003644:	e05a      	b.n	80036fc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <USER_SPI_write+0xf0>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <USER_SPI_write+0x44>
 8003654:	2302      	movs	r3, #2
 8003656:	e051      	b.n	80036fc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <USER_SPI_write+0xf4>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <USER_SPI_write+0x56>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	025b      	lsls	r3, r3, #9
 8003668:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d110      	bne.n	8003692 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	2018      	movs	r0, #24
 8003674:	f7ff fdf7 	bl	8003266 <send_cmd>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d136      	bne.n	80036ec <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800367e:	21fe      	movs	r1, #254	; 0xfe
 8003680:	68b8      	ldr	r0, [r7, #8]
 8003682:	f7ff fdbe 	bl	8003202 <xmit_datablock>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02f      	beq.n	80036ec <USER_SPI_write+0xd8>
			count = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	e02c      	b.n	80036ec <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <USER_SPI_write+0xf4>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f003 0306 	and.w	r3, r3, #6
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <USER_SPI_write+0x92>
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	2097      	movs	r0, #151	; 0x97
 80036a2:	f7ff fde0 	bl	8003266 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	2019      	movs	r0, #25
 80036aa:	f7ff fddc 	bl	8003266 <send_cmd>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11b      	bne.n	80036ec <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80036b4:	21fc      	movs	r1, #252	; 0xfc
 80036b6:	68b8      	ldr	r0, [r7, #8]
 80036b8:	f7ff fda3 	bl	8003202 <xmit_datablock>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <USER_SPI_write+0xc4>
				buff += 512;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80036c8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ee      	bne.n	80036b4 <USER_SPI_write+0xa0>
 80036d6:	e000      	b.n	80036da <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80036d8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80036da:	21fd      	movs	r1, #253	; 0xfd
 80036dc:	2000      	movs	r0, #0
 80036de:	f7ff fd90 	bl	8003202 <xmit_datablock>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <USER_SPI_write+0xd8>
 80036e8:	2301      	movs	r3, #1
 80036ea:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80036ec:	f7ff fd38 	bl	8003160 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000020 	.word	0x20000020
 8003708:	20000040 	.word	0x20000040

0800370c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	; 0x30
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	603a      	str	r2, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
 8003718:	460b      	mov	r3, r1
 800371a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <USER_SPI_ioctl+0x1a>
 8003722:	2304      	movs	r3, #4
 8003724:	e15a      	b.n	80039dc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003726:	4baf      	ldr	r3, [pc, #700]	; (80039e4 <USER_SPI_ioctl+0x2d8>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <USER_SPI_ioctl+0x2c>
 8003734:	2303      	movs	r3, #3
 8003736:	e151      	b.n	80039dc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800373e:	79bb      	ldrb	r3, [r7, #6]
 8003740:	2b04      	cmp	r3, #4
 8003742:	f200 8136 	bhi.w	80039b2 <USER_SPI_ioctl+0x2a6>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <USER_SPI_ioctl+0x40>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	08003761 	.word	0x08003761
 8003750:	08003775 	.word	0x08003775
 8003754:	080039b3 	.word	0x080039b3
 8003758:	08003821 	.word	0x08003821
 800375c:	08003917 	.word	0x08003917
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003760:	f7ff fd0c 	bl	800317c <spiselect>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8127 	beq.w	80039ba <USER_SPI_ioctl+0x2ae>
 800376c:	2300      	movs	r3, #0
 800376e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003772:	e122      	b.n	80039ba <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003774:	2100      	movs	r1, #0
 8003776:	2009      	movs	r0, #9
 8003778:	f7ff fd75 	bl	8003266 <send_cmd>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 811d 	bne.w	80039be <USER_SPI_ioctl+0x2b2>
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	2110      	movs	r1, #16
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fd10 	bl	80031b0 <rcvr_datablock>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8113 	beq.w	80039be <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003798:	7b3b      	ldrb	r3, [r7, #12]
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d111      	bne.n	80037c6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80037a2:	7d7b      	ldrb	r3, [r7, #21]
 80037a4:	461a      	mov	r2, r3
 80037a6:	7d3b      	ldrb	r3, [r7, #20]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	4413      	add	r3, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80037b6:	4413      	add	r3, r2
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	029a      	lsls	r2, r3, #10
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e028      	b.n	8003818 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80037c6:	7c7b      	ldrb	r3, [r7, #17]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	7dbb      	ldrb	r3, [r7, #22]
 80037d0:	09db      	lsrs	r3, r3, #7
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	7d7b      	ldrb	r3, [r7, #21]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0306 	and.w	r3, r3, #6
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3302      	adds	r3, #2
 80037ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80037ee:	7d3b      	ldrb	r3, [r7, #20]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	7cbb      	ldrb	r3, [r7, #18]
 80037fe:	029b      	lsls	r3, r3, #10
 8003800:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003804:	4413      	add	r3, r2
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800380a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800380e:	3b09      	subs	r3, #9
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	409a      	lsls	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800381e:	e0ce      	b.n	80039be <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003820:	4b71      	ldr	r3, [pc, #452]	; (80039e8 <USER_SPI_ioctl+0x2dc>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d031      	beq.n	8003890 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800382c:	2100      	movs	r1, #0
 800382e:	208d      	movs	r0, #141	; 0x8d
 8003830:	f7ff fd19 	bl	8003266 <send_cmd>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 80c3 	bne.w	80039c2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800383c:	20ff      	movs	r0, #255	; 0xff
 800383e:	f7ff fc21 	bl	8003084 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003842:	f107 030c 	add.w	r3, r7, #12
 8003846:	2110      	movs	r1, #16
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fcb1 	bl	80031b0 <rcvr_datablock>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80b6 	beq.w	80039c2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003856:	2330      	movs	r3, #48	; 0x30
 8003858:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800385c:	e007      	b.n	800386e <USER_SPI_ioctl+0x162>
 800385e:	20ff      	movs	r0, #255	; 0xff
 8003860:	f7ff fc10 	bl	8003084 <xchg_spi>
 8003864:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003868:	3b01      	subs	r3, #1
 800386a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800386e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f3      	bne.n	800385e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003876:	7dbb      	ldrb	r3, [r7, #22]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	2310      	movs	r3, #16
 8003880:	fa03 f202 	lsl.w	r2, r3, r2
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800388e:	e098      	b.n	80039c2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003890:	2100      	movs	r1, #0
 8003892:	2009      	movs	r0, #9
 8003894:	f7ff fce7 	bl	8003266 <send_cmd>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 8091 	bne.w	80039c2 <USER_SPI_ioctl+0x2b6>
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	2110      	movs	r1, #16
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fc82 	bl	80031b0 <rcvr_datablock>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8087 	beq.w	80039c2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80038b4:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <USER_SPI_ioctl+0x2dc>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d012      	beq.n	80038e6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80038c0:	7dbb      	ldrb	r3, [r7, #22]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80038c8:	7dfa      	ldrb	r2, [r7, #23]
 80038ca:	09d2      	lsrs	r2, r2, #7
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4413      	add	r3, r2
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	7e7b      	ldrb	r3, [r7, #25]
 80038d4:	099b      	lsrs	r3, r3, #6
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e013      	b.n	800390e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80038e6:	7dbb      	ldrb	r3, [r7, #22]
 80038e8:	109b      	asrs	r3, r3, #2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	3301      	adds	r3, #1
 80038f2:	7dfa      	ldrb	r2, [r7, #23]
 80038f4:	00d2      	lsls	r2, r2, #3
 80038f6:	f002 0218 	and.w	r2, r2, #24
 80038fa:	7df9      	ldrb	r1, [r7, #23]
 80038fc:	0949      	lsrs	r1, r1, #5
 80038fe:	b2c9      	uxtb	r1, r1
 8003900:	440a      	add	r2, r1
 8003902:	3201      	adds	r2, #1
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	461a      	mov	r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003914:	e055      	b.n	80039c2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <USER_SPI_ioctl+0x2dc>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	f003 0306 	and.w	r3, r3, #6
 800391e:	2b00      	cmp	r3, #0
 8003920:	d051      	beq.n	80039c6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003922:	f107 020c 	add.w	r2, r7, #12
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	210b      	movs	r1, #11
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff feee 	bl	800370c <USER_SPI_ioctl>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d149      	bne.n	80039ca <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003936:	7b3b      	ldrb	r3, [r7, #12]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <USER_SPI_ioctl+0x23e>
 8003940:	7dbb      	ldrb	r3, [r7, #22]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d041      	beq.n	80039ce <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <USER_SPI_ioctl+0x2dc>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	025b      	lsls	r3, r3, #9
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	025b      	lsls	r3, r3, #9
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003974:	2020      	movs	r0, #32
 8003976:	f7ff fc76 	bl	8003266 <send_cmd>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d128      	bne.n	80039d2 <USER_SPI_ioctl+0x2c6>
 8003980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003982:	2021      	movs	r0, #33	; 0x21
 8003984:	f7ff fc6f 	bl	8003266 <send_cmd>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d121      	bne.n	80039d2 <USER_SPI_ioctl+0x2c6>
 800398e:	2100      	movs	r1, #0
 8003990:	2026      	movs	r0, #38	; 0x26
 8003992:	f7ff fc68 	bl	8003266 <send_cmd>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11a      	bne.n	80039d2 <USER_SPI_ioctl+0x2c6>
 800399c:	f247 5030 	movw	r0, #30000	; 0x7530
 80039a0:	f7ff fbbb 	bl	800311a <wait_ready>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80039b0:	e00f      	b.n	80039d2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80039b2:	2304      	movs	r3, #4
 80039b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039b8:	e00c      	b.n	80039d4 <USER_SPI_ioctl+0x2c8>
		break;
 80039ba:	bf00      	nop
 80039bc:	e00a      	b.n	80039d4 <USER_SPI_ioctl+0x2c8>
		break;
 80039be:	bf00      	nop
 80039c0:	e008      	b.n	80039d4 <USER_SPI_ioctl+0x2c8>
		break;
 80039c2:	bf00      	nop
 80039c4:	e006      	b.n	80039d4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80039c6:	bf00      	nop
 80039c8:	e004      	b.n	80039d4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80039ca:	bf00      	nop
 80039cc:	e002      	b.n	80039d4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <USER_SPI_ioctl+0x2c8>
		break;
 80039d2:	bf00      	nop
	}

	despiselect();
 80039d4:	f7ff fbc4 	bl	8003160 <despiselect>

	return res;
 80039d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3730      	adds	r7, #48	; 0x30
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000020 	.word	0x20000020
 80039e8:	20000040 	.word	0x20000040

080039ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003a02:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a04:	7a5b      	ldrb	r3, [r3, #9]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d831      	bhi.n	8003a70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a0e:	7a5b      	ldrb	r3, [r3, #9]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003a1a:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a1c:	7a5b      	ldrb	r3, [r3, #9]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a2c:	7a5b      	ldrb	r3, [r3, #9]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a34:	4413      	add	r3, r2
 8003a36:	79fa      	ldrb	r2, [r7, #7]
 8003a38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a3c:	7a5b      	ldrb	r3, [r3, #9]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	b2d1      	uxtb	r1, r2
 8003a44:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <FATFS_LinkDriverEx+0x94>)
 8003a46:	7251      	strb	r1, [r2, #9]
 8003a48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003a4a:	7dbb      	ldrb	r3, [r7, #22]
 8003a4c:	3330      	adds	r3, #48	; 0x30
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3301      	adds	r3, #1
 8003a58:	223a      	movs	r2, #58	; 0x3a
 8003a5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	3302      	adds	r3, #2
 8003a60:	222f      	movs	r2, #47	; 0x2f
 8003a62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3303      	adds	r3, #3
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000044 	.word	0x20000044

08003a84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ffaa 	bl	80039ec <FATFS_LinkDriverEx>
 8003a98:	4603      	mov	r3, r0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4e0d      	ldr	r6, [pc, #52]	; (8003adc <__libc_init_array+0x38>)
 8003aa8:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aaa:	1ba4      	subs	r4, r4, r6
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	2500      	movs	r5, #0
 8003ab0:	42a5      	cmp	r5, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	4e0b      	ldr	r6, [pc, #44]	; (8003ae4 <__libc_init_array+0x40>)
 8003ab6:	4c0c      	ldr	r4, [pc, #48]	; (8003ae8 <__libc_init_array+0x44>)
 8003ab8:	f000 f820 	bl	8003afc <_init>
 8003abc:	1ba4      	subs	r4, r4, r6
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	2500      	movs	r5, #0
 8003ac2:	42a5      	cmp	r5, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003acc:	4798      	blx	r3
 8003ace:	3501      	adds	r5, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad6:	4798      	blx	r3
 8003ad8:	3501      	adds	r5, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08003b70 	.word	0x08003b70
 8003ae0:	08003b70 	.word	0x08003b70
 8003ae4:	08003b70 	.word	0x08003b70
 8003ae8:	08003b74 	.word	0x08003b74

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
